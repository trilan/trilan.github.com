Jenkins и Docker
================

:date: 2013-10-10
:slug: jenkins-docker
:tags: jenkins, docker
:author: Миша Юматов
:summary:

    Для непрерывного тестирования проектов мы используем `Jenkins`_ — инструмент,
    который не нуждается в представлении. У нас Jenkins  проверяет все
    известные ему репозитории на наличие новых коммитов каждые 5 минут. Если
    находит их, запускает полный набор тестов проекта и собирает метрики кода.

    .. _Jenkins: http://jenkins-ci.org/

Для непрерывного тестирования проектов мы используем `Jenkins`_ — инструмент,
который не нуждается в представлении. У нас Jenkins  проверяет все известные
ему репозитории на наличие новых коммитов каждые 5 минут. Если находит их,
запускает полный набор тестов проекта и собирает метрики кода.

.. _Jenkins: http://jenkins-ci.org/

Убежден, что тесты на сервере непрерывной интеграции должны запускаться в
окружении, максимально приближенном к боевому. Например, если предполагается на
production'е использовать PostgreSQL, то и для тестов необходимо использовать
его же (а не SQLite, потому что быстро). Это не самая простая задача, так как
необходимо заботиться об изоляции сборок друг от друга. Новые сборки должны
получать чистую БД, без мусора, который мог остаться от предыдущих, а
параллельные сборки не должны мешать друг другу.

Вот уже месяц с этой задачей нам помогает успешно справляться `Docker`_ —
инструмент для работы с легковесными изолированными контейнерами. Запуск таких
контейнеров практически ничего не стоит по времени и ресурсам, в отличие от
запуска виртуальных машин. У каждого контейнера свое пространство процессов и
свой сетевой стек, они изолированы друг от друга.

.. _Docker: http://www.docker.io/

Каждая сборка в Jenkins'е создает новый контейнер на основе заранее
подготовленного образа. По завершении сборки, не зависимо от ее результата,
контейнер уничтожается. Используемый для сборок образ содержит все необходимые
сервисы (PostgreSQL, MySQL, Redis и т.д.), которые остается запустить в самом
начале тестирования.

Подготовить образ для тестов можно с помощью специального файла `Dockerfile`_,
очень похожего на обычный shell-скрипт. Например (укороченный вариант)::

    FROM ubuntu:precise

    RUN apt-get update
    RUN apt-get install -y build-essential
    RUN apt-get install -y redis-server
    RUN apt-get install -y postgresql

    WORKDIR /mnt/workspace
    CMD make jenkins

.. _Dockerfile: http://docs.docker.io/en/latest/use/builder/

Собранный по такому скрипту образ будет содержать Ubuntu 12.04 с установленными
сервисами Redis и PostgreSQL. В последних двух строчках указано, что сразу же
после создания контейнера на основе этого образа необходимо выполнить команду
``make jenkins`` в директории ``/mnt/workspace``. Подразумевается, что
``/mnt/workspace`` содержит исходный код проекта. В корне этой директории
должен находиться файл `Makefile`_ с определенной целью ``jenkins``. Например::

    jenkins:
    	service start postgresql
    	service start redis-server
    	pip install -r requirements.txt
    	python manage.py jenkins

.. _Makefile: http://www.gnu.org/software/make/

Что же касается самого Jenkins'а, то он у нас для каждой сборки запускает такой
скрипт::

    #!/bin/bash

    # Создаем контейнер и монтируем рабочую директорию сборки в директорию
    # /mnt/workspace контейнера. В контейнере запускается команда make jenkins
    CONTAINER=$(docker run -d -v $WORKSPACE:/mnt/workspace test)

    # Подкючаемся к выводу команды make jenkins для трансляции его в лог сборки
    docker attach $CONTAINER

    # Ждем, пока завершится выполнение тестов, и запоминаем код завершения
    # команды make jenkins
    RC=$(docker wait $CONTAINER)

    # Удаляем контейнер
    docker rm $CONTAINER > /dev/null

    # Завершаем работу скрипта с тем же кодом, с которым завершилось
    # выполнение тестов
    exit $RC

Раньше вопрос о поддержке новых сервисов на сервере непрерывной интеграции
заканчивался ничем из-за сложности внедрения. Теперь же это практически ничего
не стоит: достаточно добавить нужные строчки в Dockerfile и пересобрать образ.

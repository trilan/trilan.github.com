Перенос данных с помощью fixtures
=================================

:date: 2011-02-09
:slug: django-fixtures
:tags: django
:author: Дима Кукушкин
:summary:
    Иногда возникает задача перенести данные с помощью сериализованных дампов,
    генерируемых командой ``./manage.py dumpdata``. При этом в дамп попадают данные
    из ``auth.models.Permission`` и ``contenttypes.models.ContentType``.

    Во время синхронизации с помощью команды ``syncdb``, после создания таблиц и
    прочей информации о схеме БД также происходит срабатывание хэндлеров,
    подключенных к сигналу ``post_syncdb``: в этот момент и создаются contenttypes,
    а также permissions. При этом первичные ключи для них генерируются в реальном
    времени в самой БД и нет возможности на это как-то повлиять. Поэтому мы не
    можем быть уверены в целостности данных при загрузке из дампа, если в проекте
    присутствуют объекты, привязанные к ``ContentType``.

Иногда возникает задача перенести данные с помощью сериализованных дампов,
генерируемых командой ``./manage.py dumpdata``. При этом в дамп попадают данные
из ``auth.models.Permission`` и ``contenttypes.models.ContentType``.

Во время синхронизации с помощью команды ``syncdb``, после создания таблиц и
прочей информации о схеме БД также происходит срабатывание хэндлеров,
подключенных к сигналу ``post_syncdb``: в этот момент и создаются contenttypes,
а также permissions. При этом первичные ключи для них генерируются в реальном
времени в самой БД и нет возможности на это как-то повлиять. Поэтому мы не
можем быть уверены в целостности данных при загрузке из дампа, если в проекте
присутствуют объекты, привязанные к ``ContentType``.

Решение данной проблемы пришло с релизом Django 1.2: появились так называемые
"естественные ключи", представляющие из себя некоторые списки значений
атрибутов объекта, которые могут однозначно идентифицировать его в базе данных.
Подробнее про естественные ключи можно почитать `здесь`_.

.. _здесь: http://djangoadvent.com/1.2/natural-keys/

Теперь выгрузка данных заключается лишь в том, чтобы исключить из дампа
``ContentType``,  ``Permission`` и ``admin.LogEntry`` (в приложении ``admin``
есть модель ``LogEntry``, которая может содержать ссылки на типы содержимого,
которых уже нет). Для этого выполняем команды::

    ./manage.py dumpdata --natural auth.User auth.Group > auth.json
    ./manage.py dumpdata --natural --exclude=contenttypes --exclude=auth --exclude=admin > data.json

Сначала мы выгружаем данные из моделей ``User`` и ``Group``, чтобы в дамп не
попали ``Permission``, а затем все остальные данные, исключая полностью
приложения ``contenttypes``, ``auth`` и ``admin``. Ключ ``--natural`` позволяет
использовать естественные ключи вместо первичных там, где это возможно.

Для загрузки, как и прежде, используется ``loaddata``::

    ./manage.py loaddata auth.json
    ./manage.py loaddata data.json
